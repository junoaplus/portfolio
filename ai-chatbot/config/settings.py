"""
환경설정 및 전역 상수 관리
- 환경변수 로드
- API 엔드포인트 정의
- 완성된 페이지 목록 관리
"""

import os
from typing import List, Dict, Any
from dotenv import load_dotenv

# .env 파일 로드
load_dotenv()

class Config:
    # === 환경변수 ===
    OPENAI_API_KEY: str = os.getenv("OPENAI_API_KEY")
    PORTFOLIO_BASE_URL: str = os.getenv("PORTFOLIO_BASE_URL", "http://localhost:3000")
    
    # === 데이터 경로 설정 ===
    PROJECT_DATA_PATH: str = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "projects")
    PERSONAL_DATA_PATH: str = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data", "personal")
    
    # === API 설정 (About Me용으로 유지) ===
    PORTFOLIO_API_BASE_URL: str = f"{PORTFOLIO_BASE_URL}/api/portfolio" 
    REQUEST_TIMEOUT: int = 30
    MAX_RETRIES: int = 3
    
    # === OpenAI 설정 ===
    OPENAI_MODEL: str = "gpt-4o-mini"
    OPENAI_TEMPERATURE: float = 0.7
    OPENAI_MAX_TOKENS: int = 2000
    
    # === 완성된 페이지 목록 (동적 데이터 추출 가능) ===
    COMPLETE_PROJECTS: List[str] = [
        "boardgame-chatbot",    # 보드게임 챗봇 (상세페이지 완성)
        "date-recommendation",  # 데이트 코스 AI (상세페이지 완성)
        "newspaper-churn",      # 신문 이탈 예측 (상세페이지 완성) 
        "nurse-salary"          # 간호사 급여 예측 (상세페이지 완성)
    ]
    
    # === 완성된 LLM 스킬 목록 ===
    COMPLETE_LLM_SKILLS: List[str] = [
        "langchain",    # LangChain (상세페이지 완성)
        "rag",          # RAG (상세페이지 완성)
        "vector-db",    # Vector DB (상세페이지 완성)
        "openai",       # OpenAI (상세페이지 완성)
        "fine-tuning",  # Fine-tuning (상세페이지 완성)
        "postgresql"    # PostgreSQL (상세페이지 완성)
    ]
    
    @staticmethod
    def get_toss_job_context() -> str:
        """
        Deprecated - No longer used
        """
        return """"""

    @staticmethod
    def get_game_n_job_context() -> str:
        """Deprecated - No longer used"""
        return """"""

    @staticmethod
    def get_lbox_job_context() -> str:
        """엘박스 ML Engineer 채용공고 컨텍스트"""
        return """
📍 회사: 엘박스 (L-Box)
📍 포지션: Machine Learning Engineer (Product)
📍 비전: 법을 사람들에게 더 가깝고 의미 있게 만든다

🏆 회사 성과:
- 전체 변호사 60% 이상이 사용하는 판례검색 서비스 시장 점유율 1위
- 개업 변호사 절반 이상이 사용하는 '엘박스 AI'
- 시리즈 C 300억 투자 유치 (2025년)
- 국내 1위 리걸테크 기업

🎯 주요 업무:
1. 국내 최대 법률 데이터베이스 활용 혁신적 법률 AI 제품 개발
2. LLM 기반 시스템 설계·개발·배포 End-to-End 담당
3. 법률 AI 특화 검색 모델 개발 및 시스템 구조 최적화
4. RAG 성능, 답변 품질 등 핵심 지표 관리 및 재학습 시스템 설계
5. LLM Powered Autonomous Agents 컴포넌트 구성 및 개발

✅ 자격 요건:
- End-to-End ML 서비스 개발 3년 이상 경험
- 머신러닝 이론적 깊이 이해 + 실제 서비스 개발/운영
- ML 기반 서비스 프로덕션 배포/운영 경험
- LLM, RAG 시스템 설계~평가 직접 주도 경험
- AWS 등 클라우드 환경 서비스 개발/인프라 운영
- 백엔드 전반(API, DB, CI/CD) 이해

🎯 우대사항:
- PyTorch/TensorFlow로 최신 논문 직접 구현
- Online Learning 시스템 구축 경험
- 검색 및 대화 시스템 이해
- ML 파이프라인 설계 (k8s, Airflow)
- IR, Recommendation, RAG, LLM 최신 연구 팔로우

🎯 엘박스가 원하는 인재:
- LLM/RAG 시스템을 End-to-End로 구축하고 고도화
- 실제 서비스 운영하며 성능과 비용을 최적화
- 법률 도메인 특화 AI 시스템 설계
- 장기적 관점에서 시스템 스케일링 고민

=== 채용담당자 마인드셋 ===
당신은 엘박스 ML Engineer 채용담당자로서 다음을 중요시합니다:
  1. **LLM/RAG 전문성**: End-to-End 시스템 구축 및 운영 경험
  2. **실무 경험**: 프로덕션 환경에서 ML 서비스 운영 능력
  3. **성능 최적화**: RAG 성능, 응답속도, 비용 등 실질적 개선
  4. **도메인 특화**: 법률 AI에 특화된 시스템 설계 능력
  5. **장기적 사고**: 시스템 확장성과 지속가능성 고려

평가 우선순위:
  1순위: LLM/RAG 시스템 실제 구축 및 운영 경험
  2순위: ML 파이프라인 설계 및 성능 최적화 능력
  """

    @staticmethod
    def get_nuua_job_context() -> str:
        """누아 AI 에이전트 개발자 채용공고 컨텍스트"""
        return """
📍 회사: 누아 (NUUA)
📍 포지션: AI 에이전트 개발자 (신입)
📍 비전: AI와 IT를 기반으로 여행시장 혁신

🏆 회사 성과:
- 국내 최초, 전 세계 7번째 IATA 차세대 항공권 유통 최상위 기술 인증
- 과기정통부 AI 그랜드 챌린지 4차례 입상 (장관상 수상)
- 8년 연속 흑자, 4년 연속 42% 이상 성장
- 2024년 130억원 시리즈A 투자 유치

🎯 주요 업무:
1. 여행사 업무 자동화를 위한 AI 에이전트 설계 및 구현
2. 비정형 데이터 구조화를 통한 업무 자동화 툴 개발
3. 항공권 유통 솔루션 기반 지능형 에이전트 개발

✅ 자격 요건:
- 논리적 사고와 문제해결 능력
- 주어진 문제를 성실하고 꾸준하게 해결
- 4년제 대학교 졸업(예정)자

🎯 우대사항:
- Python, Java 등 프로그래밍 언어 이해
- 대규모 데이터 처리 및 분석 경험
- AI 및 머신러닝 관련 프로젝트 경험

💼 누아의 핵심 제품:
- 누아 오피스: 여행사 발권 업무 자동화 (취소/환불 자동 처리)
- 워짜이날: 방한 중화권 150만명 사용 한국 여행 앱
- 누아 메트로: 24개 도시 오프라인 지하철 검색

🎯 누아가 원하는 인재:
- AI 에이전트로 실질적 문제 해결에 관심
- 여행 산업의 본질적 문제 해결에 열정
- 꾸준함과 성실함으로 문제를 끝까지 해결

=== 채용담당자 마인드셋 ===
당신은 누아 AI 에이전트 개발자 채용담당자로서 다음을 중요시합니다:
  1. **문제 해결 능력**: 복잡한 문제를 논리적으로 해결하는 능력
  2. **AI 에이전트 이해**: 업무 자동화를 위한 AI 에이전트 설계 능력
  3. **비정형 데이터 처리**: 실제 비즈니스 데이터 구조화 경험
  4. **실용적 접근**: 기술로 실제 문제를 해결하려는 태도
  5. **꾸준함과 성실함**: 끝까지 문제를 해결하는 자세

평가 우선순위:
  1순위: AI 에이전트/자동화 시스템 구축 경험
  2순위: 비정형 데이터 처리 및 실무 문제 해결 능력
  """

    @staticmethod
    def get_ably_job_context() -> str:
        """Deprecated - No longer used"""
        return """"""

    @staticmethod
    def get_estsoft_job_context() -> str:
        """이스트소프트 LLM Engineer 채용공고 컨텍스트"""
        return """
📍 회사: 이스트소프트 (Est soft)
📍 직종: LLM Engineer (산업기능요원)
📍 분야: 실용주의 인공지능 개발
📍 서비스: 알툴즈, 알약, Perso SaaS, Alan AI

🎯 주요 업무:
1. LLM 모델을 활용한 이스트소프트 AI 서비스 연구 및 개발
2. OpenLLM 학습 및 최신 상용 LLM 모델 응용
3. 고퀄리티 자연어 답변 생성 시스템 구축
4. LLM 관련 선행 연구 및 프로토타입 개발
5. Pytorch, Triton, Docker, Azure 등 기술스택 활용

✅ 필수 요구사항:
- 산업기능요원 보충역 신입 자격요건 충족
- 문제해결을 즐기고 새로운 기술 학습에 적극적인 성향
- 동료들과 협업 가능하며 책임감 있는 인재

🌟 우대사항:
- LLM 모델 개발 및 파인튜닝 경험
- PyTorch, Azure 클라우드 활용 경험
- 자연어 처리 및 AI 서비스 프로토타입 구현 경험
- Docker 컨테이너 환경 개발 경험

당신은 이스트소프트 LLM Engineer 채용담당자로서 다음을 중요시합니다:
  1. **LLM 기술 역량**: 대규모 언어모델 개발 및 최적화 능력
  2. **실용주의 접근**: 기술을 실제 서비스에 적용하는 실용적 사고
  3. **프로토타입 개발**: 빠른 아이디어 검증 및 구현 능력
  4. **클라우드 환경**: Azure 등 클라우드 기반 AI 서비스 구축 경험
  5. **협업과 책임감**: 팀워크 중시 및 업무 완수 의지

평가 우선순위:
  1순위: LLM 모델 개발 및 자연어 처리 경험
  2순위: 실제 AI 서비스 프로토타입 구현 능력
  """

    @staticmethod
    def get_liner_job_context() -> str:
        """라이너 ML Engineer(Agent) 채용공고 컨텍스트"""
        return """
📍 회사: 라이너 (LINER)
📍 포지션: ML Engineer(Agent)
📍 비전: 세상에서 가장 신뢰할 수 있는 AI
📍 서비스: AI Search, Research Agent, 정보 탐색 혁신

🏆 회사 성과:
- 10M+ 사용자의 AI 검색/정보 탐색 서비스
- 438B KRW 누적 투자 유치 (시리즈 B 완료)
- 글로벌 AI 검색 시장에서 독창적 포지셔닝
- 정보 탐색의 어려움을 해결하는 혁신적 AI 기술

🎯 주요 업무:
1. AI Search Agent 시스템 설계 및 개발
2. Research Agent 워크플로우 설계 및 구현
3. 대화형 AI 시스템과 정보 검색 시스템 통합
4. 검색 에이전트의 정확성 및 신뢰성 향상
5. 사용자 질의에 대한 맞춤형 정보 탐색 알고리즘 개발
6. 다양한 데이터 소스 통합 및 정보 품질 관리
7. Agent 성능 평가 및 지속적 개선 시스템 구축

✅ 필수 자격요건:
- 3년 이상 머신러닝 실무 경험
- AI Agent, 대화형 AI, 또는 검색 시스템 개발 경험
- Python, PyTorch/TensorFlow 등 ML 프레임워크 숙련
- 프로덕션 환경에서 ML 모델 배포 및 운영 경험
- RESTful API 설계 및 백엔드 개발 경험
- 데이터 처리 및 분석 능력 (SQL, 데이터 파이프라인)

🌟 우대사항:
- LLM, RAG, 또는 Multi-Agent 시스템 개발 경험
- 검색 엔진 또는 추천 시스템 개발 경험
- AWS/GCP 등 클라우드 환경에서의 ML 서비스 개발
- 대규모 트래픽 환경에서 ML 시스템 운영 경험
- 오픈소스 기여 또는 ML 관련 논문 발표 경험
- 스타트업 또는 빠른 개발 환경 적응 능력

🎯 라이너가 원하는 인재:
- AI 검색과 정보 탐색 분야의 혁신을 주도할 수 있는 인재
- 사용자 중심의 AI Agent 시스템 설계 능력
- 복잡한 정보 검색 문제를 창의적으로 해결하는 사고력
- 빠르게 변화하는 AI 기술 트렌드에 적응하고 학습하는 능력
- 글로벌 스케일의 AI 서비스에 대한 이해와 경험

=== 채용담당자 마인드셋 ===
당신은 라이너 ML Engineer(Agent) 채용담당자로서 다음을 중요시합니다:
  1. **AI Agent 전문성**: 검색 에이전트, Research Agent 개발 경험
  2. **정보 검색 시스템**: 대규모 정보 탐색 및 검색 알고리즘 이해
  3. **사용자 경험**: 10M+ 사용자 대상 AI 서비스 최적화 능력  
  4. **신뢰성과 정확성**: 정보의 정확성과 신뢰성을 보장하는 시스템 구축
  5. **글로벌 스케일**: 대규모 트래픽과 다양한 언어/문화 대응 능력

평가 우선순위:
  1순위: AI Agent/검색 시스템 실제 개발 및 운영 경험
  2순위: 대화형 AI와 정보 검색 기술의 융합 능력
  """

    @staticmethod
    def get_toss_cover_letter() -> str:
        """Deprecated - No longer used"""
        return """"""

    @staticmethod
    def get_game_n_cover_letter() -> str:
        """Deprecated - No longer used"""
        return """"""

    @staticmethod
    def get_ably_cover_letter() -> str:
        """Deprecated - No longer used"""
        return """"""

    @staticmethod
    def get_nuua_cover_letter() -> str:
        """누아 자소서 데이터"""
        return """
=== 누아 AI 에이전트 개발자 자소서 ===

💡 지원동기:
자동화와 구조화, 그리고 솔루션 개발을 정말 좋아하고 잘한다고 생각합니다. AI 에이전트를 활용하여 멀티 에이전트 챗봇 시스템을 직접 구축해봤고, 비정형 데이터를 체계적으로 정리하는 작업들을 다양하게 도전해왔습니다.

특히 217개 보드게임의 복잡한 룰을 자동으로 설명해주는 시스템을 만들거나, 4개 API의 20만개 비정형 데이터를 9만개로 정제하는 등 반복적이고 복잡한 업무를 AI로 해결하는 것에 큰 보람을 느꼈습니다. 

누아가 여행사의 수작업 업무를 AI 에이전트로 자동화하는 것처럼, 저도 이런 자동화 솔루션을 만드는 것을 정말 좋아합니다. "당연해야 할 것들에 도전한다"는 누아의 철학이 제가 추구하는 방향과 완벽히 일치하여 이 회사에서 꼭 일해보고 싶습니다.

🛠️ 핵심기술:
1) AI 에이전트 설계: LangGraph 멀티 에이전트 시스템으로 5개 전문 에이전트가 협업하는 자동화 시스템 구축
2) 비정형 데이터 구조화: PySpark로 4개 API 20만개 데이터를 9만개로 정제, 카테고리 자동 분류 및 표준화
3) 업무 자동화: 217개 보드게임 룰 설명 자동화, 수작업을 AI 자동 응답으로 전환
4) 백엔드 개발: FastAPI를 활용한 REST API 구축, PostgreSQL 데이터베이스 설계
5) 머신러닝: RandomForest, XGBoost를 활용한 분류 모델링, 87% F1-Score 달성

🎯 누아에서의 목표:
AI 에이전트를 활용하여 여행사 업무의 자동화를 극대화하고 싶습니다. 복잡하고 반복적인 발권, 취소, 환불 업무를 AI가 처리하도록 하여 여행사 직원들이 더 가치 있는 고객 서비스에 집중할 수 있는 환경을 만들고자 합니다.

특히 비정형 항공권 데이터를 체계적으로 구조화하고, 각 항공사별 다른 규칙들을 AI가 자동으로 학습하여 처리할 수 있는 시스템을 구축하고 싶습니다. 제가 보드게임 룰 자동화에서 성과를 거둔 것처럼, 여행 업무에서도 '당연히 자동화되어야 할 것들'을 실현하겠습니다.

💪 차별화포인트:
첫째, 실제 AI 에이전트 시스템을 구축해본 경험이 있습니다. LangGraph로 멀티 에이전트 시스템을 만들어 Intent Router가 질문을 분석하고 적절한 전문 에이전트로 라우팅하는 구조를 직접 구현했습니다. 이는 누아의 업무 자동화 시스템과 동일한 아키텍처입니다.

둘째, 비정형 데이터 구조화를 잘합니다. 4개 API의 서로 다른 데이터 형식을 통합하고 표준화하는 작업을 해봤기 때문에, 각 항공사별로 다른 형식의 비정형 항공권 데이터를 처리하는 누아의 업무에 바로 적용할 수 있습니다.

셋째, 자동화 솔루션 개발을 좋아합니다. 217개 보드게임 룰 설명을 수작업에서 AI 자동 응답으로 전환한 경험처럼, 반복적인 업무를 찾아내고 이를 자동화하는 것에 큰 만족감을 느낍니다.

넷째, 이커머스 사업 경험으로 실무 문제를 이해합니다. 직접 온라인 쇼핑몰을 운영하며 반복 업무의 비효율성을 체감했기 때문에, 여행사가 겪는 실무 문제와 자동화 필요성을 깊이 이해할 수 있습니다.
"""

    @staticmethod
    def get_lbox_cover_letter() -> str:
        """엘박스 자소서 데이터"""
        return """
=== 엘박스 Machine Learning Engineer 자소서 ===

💡 지원동기:
RAG 시스템과 AI 에이전트 챗봇을 만드는 것을 정말 좋아하고 잘한다고 생각합니다. 특히 판례나 법률 같은 완벽하게 정리된 데이터를 다루는 것에 큰 매력을 느낍니다. 법률 데이터는 정말 잘 정리되어 있어서 이런 체계적인 정보들을 라우팅하고 검색하는 시스템을 구축하는 것이 너무 좋습니다.

보드게임 룰 챗봇을 만들 때도 217개 게임의 복잡한 룰들을 체계화하고 사용자 질문에 정확히 답변하는 시스템을 구축하며 큰 보람을 느꼈습니다. 특히 EXAONE 파인튜닝과 FAISS 벡터 검색으로 전문 지식을 정확하게 전달하는 과정이 정말 재미있었습니다.

엘박스의 법률 데이터는 보드게임 룰보다 훨씬 더 체계적이고 완성도 높은 데이터라고 생각합니다. 이런 완벽한 데이터로 RAG 시스템을 만들고, 사용자가 복잡한 법률 정보를 쉽게 찾을 수 있게 하는 일이 정말 하고 싶습니다.

🛠️ 핵심기술:
1) LLM/RAG 시스템: LangGraph를 활용한 멀티 에이전트 시스템, Intent Router + 전문 에이전트로 질문 분류 및 응답
2) 벡터 검색: Qdrant 벡터DB와 FAISS를 활용한 실시간 검색 시스템 구축
3) LLM 파인튜닝: EXAONE 모델 파인튜닝으로 도메인 특화 지식 학습 및 정확도 향상
4) 백엔드 개발: FastAPI를 활용한 REST API 구축, PostgreSQL 데이터베이스 설계
5) 머신러닝: RandomForest, XGBoost를 활용한 분류/예측 모델링, 87% F1-Score 달성

🎯 엘박스에서의 목표:
법률 RAG 시스템과 AI 에이전트를 통해 복잡한 법률 정보 검색을 혁신하고 싶습니다. 판례, 법령, 조문 등의 체계적인 법률 데이터를 최대한 활용하여 일반인도 쉽게 필요한 법률 정보를 찾을 수 있는 시스템을 만들고자 합니다.

특히 사용자의 질문 의도를 정확히 파악하고 가장 적절한 법률 정보를 신속하게 제공하는 시스템 구축에 집중하고 싶습니다. 제가 보드게임 룰에서 달성한 정확한 정보 전달을 법률 분야에서도 실현하여 국내 1위 리걸테크 기업의 기술력 향상에 기여하겠습니다.

💪 차별화포인트:
첫째, 전문 도메인 RAG 시스템을 실제로 구축해본 경험이 있습니다. 보드게임이라는 특수 도메인에서 217개 게임의 복잡한 룰과 예외사항들을 체계화하고 정확한 답변을 제공하는 시스템을 만들었습니다. 이 경험이 법률 도메인의 복잡성과 정확성 요구사항에 직접 활용될 수 있습니다.

둘째, 체계적인 데이터를 다루는 것을 정말 좋아합니다. 법률 데이터처럼 잘 정리된 정보를 분류하고 검색하는 시스템을 구축하는 일에 큰 흥미를 느끼며, 이런 완벽한 데이터로 더 나은 시스템을 만들 수 있다는 확신이 있습니다.

셋째, 멀티 에이전트 시스템 구축 경험이 있습니다. LangGraph로 Intent Router와 전문 에이전트들이 협업하는 구조를 직접 만들어봤기 때문에, 엘박스의 법률 AI 에이전트 시스템 개발에 즉시 기여할 수 있습니다.

넷째, 성능 최적화에 집중합니다. 33초에서 3.4초로 응답 속도를 개선한 경험처럼, 사용자가 법률 정보를 더 빠르고 정확하게 찾을 수 있도록 하는 최적화 작업을 잘할 수 있습니다.
"""

    @staticmethod
    def get_estsoft_cover_letter() -> str:
        """이스트소프트 자소서 데이터"""
        return """
=== 이스트소프트 LLM Engineer 자소서 ===

💡 지원동기:
LLM 모델 개발과 자연어 처리 시스템을 만드는 것을 정말 좋아합니다. 특히 실용적인 AI 서비스를 구축하여 사람들의 일상을 편리하게 만드는 일에 큰 보람을 느낍니다. 

보드게임 룰을 찾는 번거로움을 AI 챗봇으로 해결하고, 복잡한 데이트 코스 검색을 자동화하는 등 실생활의 불편함을 AI로 개선하는 프로젝트들을 진행해왔습니다. 이런 경험들이 이스트소프트의 "실용주의 인공지능으로 일상에 편리함을 더하다"는 철학과 완벽히 일치합니다.

특히 EXAONE 모델을 직접 파인튜닝해보고 OpenLLM을 활용한 경험이 있어, 이스트소프트의 Perso SaaS와 Alan AI 같은 LLM 서비스 개발에 바로 기여할 수 있습니다. 30년간 국민 유틸리티를 만들어온 이스트소프트에서 이제 AI 분야의 혁신을 함께 만들어가고 싶습니다.

🛠️ 핵심기술:
1) LLM 모델 개발: EXAONE 파인튜닝 경험, LangChain을 활용한 멀티 에이전트 시스템 구축
2) 자연어 처리: FAISS와 Qdrant 벡터 검색, 질문 의도 분류 및 응답 생성 파이프라인
3) 백엔드 개발: FastAPI를 활용한 AI 모델 서빙 API 구축, PostgreSQL 데이터베이스 설계
4) 프론트엔드: Next.js와 React를 활용한 AI 서비스 웹 애플리케이션 개발
5) 성능 최적화: 응답 속도 33초 → 3.4초 개선, 실시간 검색 시스템 구현

🎯 이스트소프트에서의 목표:
LLM 기술을 활용하여 일상생활을 더욱 편리하게 만드는 실용적인 AI 서비스를 개발하고 싶습니다. 복잡한 자연어 질문을 이해하고 정확한 답변을 제공하는 고품질 LLM 시스템을 구축하여, 사용자들이 정보를 더 쉽고 빠르게 얻을 수 있도록 하고자 합니다.

특히 Perso SaaS와 Alan AI 같은 서비스에서 사용자 경험을 혁신적으로 개선하고 싶습니다. 제가 보드게임 챗봇에서 달성한 것처럼 복잡한 정보를 사용자 친화적으로 전달하는 LLM 서비스를 만들어, 이스트소프트의 AI 기술 발전에 기여하겠습니다.

💪 차별화포인트:
첫째, 실제 LLM 파인튜닝 경험이 있습니다. EXAONE 모델을 직접 파인튜닝해서 보드게임 전문 지식을 학습시키고, 217개 게임 룰에 대한 정확한 답변을 생성하는 시스템을 구축했습니다. 이는 이스트소프트의 OpenLLM 학습과 상용 LLM 모델 응용에 직접 활용할 수 있는 경험입니다.

둘째, 실용적인 AI 서비스 개발을 좋아합니다. 기술적 완성도보다 실제 사용자의 불편함을 해결하는 것에 집중하여, 보드게임 룰 검색의 번거로움을 AI로 자동화하고 복잡한 데이트 코스 추천을 간단하게 만드는 등 실생활 편의성 개선에 경험이 있습니다.

셋째, 자연어 처리 시스템 구축 경험이 풍부합니다. 질문 의도 분류부터 적절한 응답 생성까지 전체 NLP 파이프라인을 직접 구현해봤기 때문에, 고퀄리티 자연어 답변 생성 시스템 개발에 바로 기여할 수 있습니다.

넷째, 빠른 프로토타입 개발이 가능합니다. 아이디어부터 실제 서비스까지 풀스택으로 개발할 수 있어 LLM 관련 선행 연구나 프로토타입을 신속하게 구현할 수 있습니다.
"""

    @staticmethod
    def get_liner_cover_letter() -> str:
        """라이너 자소서 데이터"""
        return """
=== 라이너 ML Engineer(Agent) 자소서 ===

💡 지원동기:
챗봇을 만드는 것을 정말 좋아하고 잘한다고 생각합니다. 지금까지 3개의 서로 다른 챗봇 프로젝트를 만들어봤는데, 각각 다른 도전과 재미가 있었습니다.

첫 번째로 **이 AI 챗봇 포트폴리오**를 만들었습니다. LangGraph로 멀티 에이전트 시스템을 구축해서 사용자 질문을 자동으로 분류하고 적절한 전문 에이전트가 답변하는 구조를 만들었습니다. 

두 번째로 **데이트 코스 추천 챗봇**을 만들었습니다. 89,321개 장소 데이터와 Qdrant Vector DB를 사용해서 사용자가 원하는 조건에 맞는 데이트 코스를 실시간으로 추천해주는 시스템이었습니다.

세 번째로 **보드게임 룰 설명 챗봇**을 만들었습니다. 217개 보드게임의 복잡한 룰을 EXAONE 파인튜닝과 FAISS 벡터 검색으로 사용자 질문에 맞춰 정확하게 설명해주는 시스템이었습니다.

이 3개 프로젝트를 하면서 챗봇으로 사용자에게 정확한 정보를 찾아서 제공하는 것이 정말 재미있다는 걸 깨달았습니다. 라이너의 AI Search와 Research Agent도 결국 사용자가 원하는 정보를 찾아주는 챗봇의 확장된 형태라고 생각해서 지원하게 되었습니다.

🛠️ 핵심기술:
1) **멀티 에이전트 챗봇 시스템**: LangGraph로 Intent Router + 5개 전문 에이전트(기술, 프로젝트, 개인, 문제해결, 부적절) 구조 구축
2) **벡터 검색 챗봇**: Qdrant Vector DB로 89,321개 장소 데이터 검색하는 데이트 코스 추천 챗봇 개발
3) **RAG 챗봇**: FAISS 벡터 검색 + EXAONE 파인튜닝으로 217개 보드게임 룰 설명 챗봇 구축
4) **대화 관리**: LangChain으로 세션 기반 대화 히스토리 관리 및 컨텍스트 유지
5) **성능 최적화**: 데이트 코스 추천 응답 시간 33초 → 3.4초로 개선 (벡터 DB 인메모리 최적화)

🎯 라이너에서의 목표:
제가 지금까지 만들어본 3개 챗봇의 경험을 라이너의 AI Search Agent와 Research Agent 개발에 활용하고 싶습니다. 

특히 **질문 의도 파악 능력**을 더 발전시키고 싶습니다. 제가 만든 포트폴리오 챗봇에서 사용자 질문을 5가지 카테고리로 분류하는 것처럼, 라이너에서는 더 복잡하고 다양한 검색 의도를 정확히 파악하는 시스템을 만들어보고 싶습니다.

또한 **검색 속도 최적화**에도 기여하고 싶습니다. 데이트 코스 챗봇에서 33초를 3.4초로 줄인 경험을 바탕으로, 라이너의 10M+ 사용자들이 더 빠르게 정보를 찾을 수 있도록 성능 개선 작업을 하고 싶습니다.

마지막으로 보드게임 룰 챗봇처럼 **정확한 정보 제공**이 중요한 시스템을 더 큰 스케일에서 만들어보고 싶습니다.

💪 차별화포인트:
첫째, **3가지 완전히 다른 타입의 챗봇**을 직접 만들어본 경험이 있습니다. 면접용 포트폴리오 챗봇, 추천 시스템 챗봇, 전문 지식 설명 챗봇을 각각 다른 기술 스택으로 구현해봤기 때문에 챗봇 개발의 다양한 측면을 이해하고 있습니다.

둘째, **실제 성능 개선을 해본 경험**이 있습니다. 데이트 코스 추천 챗봇에서 응답 시간이 너무 느려서 사용자 경험이 안 좋다는 문제를 발견하고, 벡터 DB 최적화를 통해 33초를 3.4초로 10배 개선했습니다.

셋째, **복잡한 질문 분류 시스템**을 구축해봤습니다. 이 포트폴리오 챗봇에서 사용자 질문을 기술/프로젝트/개인/문제해결/부적절 5가지로 자동 분류하는 Intent Router를 만들었고, 실제로 잘 작동하고 있습니다.

넷째, **정확성이 중요한 정보 제공 챗봇**을 만들어봤습니다. 보드게임 룰 챗봇에서는 틀린 정보를 제공하면 안 되기 때문에 EXAONE 파인튜닝과 FAISS 검색을 조합해서 정확도를 높였습니다.

다섯째, **대화 히스토리 관리**를 직접 구현해봤습니다. LangChain으로 세션 기반 대화 맥락 유지, 이전 대화 참조, 연속된 질문 처리 등을 모두 경험해봤습니다.
"""

    @staticmethod
    def get_cover_letter_data(company: str) -> str:
        """회사별 자소서 데이터 반환"""
        if company == "toss":
            return Config.get_toss_cover_letter()
        elif company == "ably":
            return Config.get_ably_cover_letter()
        elif company == "nuua":
            return Config.get_nuua_cover_letter()
        elif company == "lbox":
            return Config.get_lbox_cover_letter()
        elif company == "estsoft":
            return Config.get_estsoft_cover_letter()
        elif company == "liner":
            return Config.get_liner_cover_letter()
        elif company == "kakao":
            return """=== 카카오 자소서 데이터 (추후 추가) ==="""
        elif company == "naver":
            return """=== 네이버 자소서 데이터 (추후 추가) ==="""
        else:
            return """=== 일반 자소서 데이터 ===
기술적 도전을 통한 문제 해결과 지속적 학습을 추구합니다."""

    @staticmethod  
    def get_company_context(company: str) -> str:
        """회사별 채용 컨텍스트 반환"""
        if company == "toss":
            return Config.get_toss_job_context()
        elif company == "ably":
            return Config.get_ably_job_context()
        elif company == "nuua":
            return Config.get_nuua_job_context()
        elif company == "lbox":
            return Config.get_lbox_job_context()
        elif company == "estsoft":
            return Config.get_estsoft_job_context()
        elif company == "liner":
            return Config.get_liner_job_context()
        else:
            return """=== 일반 AI/ML 엔지니어 채용 상황 ===
기술적 역량과 문제 해결 능력을 종합적으로 평가하는 일반적인 면접 상황입니다.
다양한 프로젝트 경험과 기술 스택을 균형있게 어필하는 것이 중요합니다."""

    @classmethod
    def validate_config(cls):
        """설정 유효성 검사"""
        if not cls.OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY가 설정되지 않았습니다")
        if not cls.PORTFOLIO_BASE_URL:
            raise ValueError("PORTFOLIO_BASE_URL이 설정되지 않았습니다")